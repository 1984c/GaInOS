<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\GaInOS\GaInOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\GaInOS\GaInOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Sun Jan 13 17:17:04 2013
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TaskMainvTask1 &rArr; printk &rArr; __c89vsprintf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[35]">vPortSaveMsrAndDisableIrq</a>
 <LI><a href="#[33]">vPortRestoreMsr</a>
 <LI><a href="#[c]">vPortSwitch2Task</a>
 <LI><a href="#[2]">vPortDispatcher</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[d]">TaskMainvTask1</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[e]">TaskMainvTask2</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[f]">TaskMainvTask3</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[10]">TaskMainvTask4</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[11]">TaskMainvTask5</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[12]">TaskMainvTask6</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[13]">TaskMainvTaskStart</a> from cfgobj.o(.text) referenced from cfgobj.o(.constdata)
 <LI><a href="#[1]">Undef_Handler</a> from start_rvds.o(RESET) referenced from start_rvds.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from start_rvds.o(RESET)
 <LI><a href="#[9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[8]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[2]">vPortDispatcher</a> from vport_rvds.o(vPort) referenced from start_rvds.o(RESET)
 <LI><a href="#[b]">vPortPreActivateTask</a> from vport.o(.text) referenced from vport_rvds.o(vPort)
 <LI><a href="#[c]">vPortSwitch2Task</a> from vport_rvds.o(vPort) referenced from vport_rvds.o(vPort)
 <LI><a href="#[a]">vPortTaskIdle</a> from vport.o(.text) referenced from vport_rvds.o(vPort)
 <LI><a href="#[14]">vSchedTbl1_CmdEp0</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[15]">vSchedTbl1_CmdEp1</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[16]">vSchedTbl1_CmdEp2</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[17]">vSchedTbl1_CmdEp3</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[18]">vSchedTbl2_CmdEp0</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[19]">vSchedTbl2_CmdEp1</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[1a]">vSchedTbl2_CmdEp2</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
 <LI><a href="#[1b]">vSchedTbl2_CmdEp3</a> from cfgschedtbl.o(.text) referenced from cfgschedtbl.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, start_rvds.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, start_rvds.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[66]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1d]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[67]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[68]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[a]"></a>vPortTaskIdle</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vport.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vport_rvds.o(vPort)
</UL>
<P><STRONG><a name="[69]"></a>vPortGetIpl</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vport.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>vPortPreActivateTask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vport_rvds.o(vPort)
</UL>
<P><STRONG><a name="[6a]"></a>vPortSetIpl</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vport.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>vPortIntGetIpl</STRONG> (ARM, 4 bytes, Stack size 0 bytes, vport.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>OSTickISR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, vport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementCounter
</UL>

<P><STRONG><a name="[6c]"></a>GetAlarmBase</STRONG> (ARM, 48 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>GetAlarm</STRONG> (ARM, 100 bytes, Stack size 4 bytes, alarm.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>SetRelAlarm</STRONG> (ARM, 148 bytes, Stack size 24 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addAlarmTick
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listCntInsert
</UL>

<P><STRONG><a name="[26]"></a>SetAbsAlarm</STRONG> (ARM, 100 bytes, Stack size 16 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listCntInsert
</UL>

<P><STRONG><a name="[27]"></a>CancelAlarm</STRONG> (ARM, 76 bytes, Stack size 16 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listCntRemove
</UL>

<P><STRONG><a name="[29]"></a>OSProcessAlarm</STRONG> (ARM, 200 bytes, Stack size 40 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addAlarmTick
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listCntRemove
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listCntInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementCounter
</UL>

<P><STRONG><a name="[2b]"></a>StopScheduleTable</STRONG> (ARM, 184 bytes, Stack size 24 bytes, autosar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = StopScheduleTable &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessScheduleTableFinalDelay
</UL>

<P><STRONG><a name="[2c]"></a>OSProcessScheduleTableFinalDelay</STRONG> (ARM, 128 bytes, Stack size 8 bytes, autosar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSProcessScheduleTableFinalDelay &rArr; StopScheduleTable &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScheduleTable
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoAddSchedTblTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp3
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp3
</UL>

<P><STRONG><a name="[2e]"></a>OSMakeNextExpiryPointReady</STRONG> (ARM, 296 bytes, Stack size 40 bytes, autosar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoAddSchedTblTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp2
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp1
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp0
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp2
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp1
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp0
</UL>

<P><STRONG><a name="[6e]"></a>GetApplicationID</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>GetISRID</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>CallTrustedFunction</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>CheckISRMemoryAccess</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>CheckTaskMemoryAccess</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>CheckObjectAccess</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>CheckObjectOwnership</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>StartScheduleTableRel</STRONG> (ARM, 192 bytes, Stack size 40 bytes, autosar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = StartScheduleTableRel &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoAddSchedTblTick
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedTblInit
</UL>

<P><STRONG><a name="[30]"></a>StartScheduleTableAbs</STRONG> (ARM, 172 bytes, Stack size 32 bytes, autosar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = StartScheduleTableAbs &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoAddSchedTblTick
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedTblInit
</UL>

<P><STRONG><a name="[75]"></a>NextScheduleTable</STRONG> (ARM, 56 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>StartScheduleTableSynchron</STRONG> (ARM, 40 bytes, Stack size 0 bytes, autosar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedTblInit
</UL>

<P><STRONG><a name="[31]"></a>SyncScheduleTable</STRONG> (ARM, 320 bytes, Stack size 40 bytes, autosar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoAddSchedTblTick
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[76]"></a>SetScheduleTableAsync</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>GetScheduleTableStatus</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>IncrementCounter</STRONG> (ARM, 160 bytes, Stack size 32 bytes, autosar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTickISR
</UL>

<P><STRONG><a name="[78]"></a>GetCounterValue</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GetElapsedCounterValue</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>TerminateApplication</STRONG> (ARM, 8 bytes, Stack size 0 bytes, autosar.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>EnableAllInterrupts</STRONG> (ARM, 12 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRestoreMsr
</UL>

<P><STRONG><a name="[34]"></a>DisableAllInterrupts</STRONG> (ARM, 24 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSaveMsrAndDisableIrq
</UL>

<P><STRONG><a name="[36]"></a>ResumeAllInterrupts</STRONG> (ARM, 40 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRestoreMsr
</UL>

<P><STRONG><a name="[37]"></a>SuspendAllInterrupts</STRONG> (ARM, 60 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSaveMsrAndDisableIrq
</UL>

<P><STRONG><a name="[38]"></a>SuspendOSInterrupts</STRONG> (ARM, 52 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSaveMsrAndDisableIrq
</UL>

<P><STRONG><a name="[39]"></a>ResumeOSInterrupts</STRONG> (ARM, 40 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRestoreMsr
</UL>

<P><STRONG><a name="[23]"></a>OS_ENTER_CRITICAL</STRONG> (ARM, 52 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSaveMsrAndDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2ActivateTask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2TerminateCurrentTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncScheduleTable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableAbs
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableRel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScheduleTable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelAlarm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAbsAlarm
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelAlarm
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementCounter
</UL>

<P><STRONG><a name="[25]"></a>OS_EXIT_CRITICAL</STRONG> (ARM, 40 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRestoreMsr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2ActivateTask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2TerminateCurrentTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncScheduleTable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableAbs
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableRel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScheduleTable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelAlarm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAbsAlarm
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelAlarm
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementCounter
</UL>

<P><STRONG><a name="[3a]"></a>StartOS</STRONG> (ARM, 48 bytes, Stack size 8 bytes, osctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = StartOS &rArr; OSSchedTblInit &rArr; StartScheduleTableRel &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInitOsTick
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedTblInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTskTcbInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMiscInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSwitch2Task
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>ShutdownOS</STRONG> (ARM, 4 bytes, Stack size 0 bytes, osctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutdownOS
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShutdownOS
</UL>

<P><STRONG><a name="[7b]"></a>OSEnterISR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, osctrl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>OSExitISR</STRONG> (ARM, 60 bytes, Stack size 0 bytes, osctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSwitch2Task
</UL>

<P><STRONG><a name="[43]"></a>tableRdyMapFindHighPriority</STRONG> (ARM, 52 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
</UL>

<P><STRONG><a name="[42]"></a>doSchedule</STRONG> (ARM, 72 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = doSchedule &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tableRdyMapFindHighPriority
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>

<P><STRONG><a name="[44]"></a>try2TerminateCurrentTask</STRONG> (ARM, 92 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = try2TerminateCurrentTask &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>

<P><STRONG><a name="[45]"></a>try2ActivateTask</STRONG> (ARM, 204 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = try2ActivateTask &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>

<P><STRONG><a name="[2a]"></a>ActivateTask</STRONG> (ARM, 76 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ActivateTask &rArr; try2ActivateTask &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2ActivateTask
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp2
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp1
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl2_CmdEp0
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp2
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp1
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSchedTbl1_CmdEp0
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTaskStart
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
</UL>

<P><STRONG><a name="[46]"></a>TerminateTask</STRONG> (ARM, 32 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TerminateTask &rArr; try2TerminateCurrentTask &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2TerminateCurrentTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTaskStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask6
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask5
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask3
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask1
</UL>

<P><STRONG><a name="[47]"></a>ChainTask</STRONG> (ARM, 128 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2ActivateTask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try2TerminateCurrentTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDispatcher
</UL>

<P><STRONG><a name="[48]"></a>Schedule</STRONG> (ARM, 40 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDispatcher
</UL>

<P><STRONG><a name="[7c]"></a>GetTaskID</STRONG> (ARM, 20 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>GetTaskState</STRONG> (ARM, 52 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>Sci_Init</STRONG> (ARM, 64 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInfo
</UL>

<P><STRONG><a name="[7e]"></a>Sci_Send</STRONG> (ARM, 12 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>DebugInfo</STRONG> (ARM, 64 bytes, Stack size 4 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Init
</UL>

<P><STRONG><a name="[4b]"></a>printk</STRONG> (ARM, 120 bytes, Stack size 88 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTaskStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask6
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask5
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask3
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask2
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMainvTask1
</UL>

<P><STRONG><a name="[7f]"></a>CpuFrequencyInit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>CpuInitOsTick</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[d]"></a>TaskMainvTask1</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask1 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[e]"></a>TaskMainvTask2</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask2 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>TaskMainvTask3</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask3 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[10]"></a>TaskMainvTask4</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask4 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[11]"></a>TaskMainvTask5</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask5 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>TaskMainvTask6</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTask6 &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>TaskMainvTaskStart</STRONG> (ARM, 28 bytes, Stack size 8 bytes, cfgobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TaskMainvTaskStart &rArr; printk &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminateTask
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgobj.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>main</STRONG> (ARM, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = main &rArr; StartOS &rArr; OSSchedTblInit &rArr; StartScheduleTableRel &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[80]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_dmul</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ddiv</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_d2ulz</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[82]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[83]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[84]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_lasr</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[85]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_double_round</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>_double_epilogue</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[86]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__decompress1</STRONG> (ARM, 128 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__0vsprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[88]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[89]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[4c]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[5c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[61]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfa.o(i.__ARM_common_call_via_r2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printfa.o(i.__ARM_common_call_via_r6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8c]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4d]"></a>free</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printk (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>vPortSaveMsrAndDisableIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vport_rvds.o(vPort))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendOSInterrupts
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendAllInterrupts
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableAllInterrupts
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[33]"></a>vPortRestoreMsr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vport_rvds.o(vPort))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeOSInterrupts
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeAllInterrupts
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableAllInterrupts
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
</UL>

<P><STRONG><a name="[c]"></a>vPortSwitch2Task</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vport_rvds.o(vPort))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSExitISR
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vport_rvds.o(vPort)
</UL>
<P><STRONG><a name="[2]"></a>vPortDispatcher</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vport_rvds.o(vPort))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChainTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSchedule
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortTaskIdle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, start_rvds.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, start_rvds.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, start_rvds.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, start_rvds.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>listCntInsert</STRONG> (ARM, 224 bytes, Stack size 28 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAbsAlarm
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelAlarm
</UL>

<P><STRONG><a name="[28]"></a>listCntRemove</STRONG> (ARM, 124 bytes, Stack size 4 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelAlarm
</UL>

<P><STRONG><a name="[22]"></a>addAlarmTick</STRONG> (ARM, 20 bytes, Stack size 0 bytes, alarm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessAlarm
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRelAlarm
</UL>

<P><STRONG><a name="[2d]"></a>vDoAddSchedTblTick</STRONG> (ARM, 20 bytes, Stack size 0 bytes, autosar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncScheduleTable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableAbs
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableRel
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessScheduleTableFinalDelay
</UL>

<P><STRONG><a name="[3b]"></a>OSMiscInit</STRONG> (ARM, 216 bytes, Stack size 8 bytes, osctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSMiscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[3c]"></a>OSTskTcbInit</STRONG> (ARM, 196 bytes, Stack size 20 bytes, osctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTskTcbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[3d]"></a>OSSchedTblInit</STRONG> (ARM, 136 bytes, Stack size 16 bytes, osctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSSchedTblInit &rArr; StartScheduleTableRel &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableSynchron
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableAbs
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScheduleTableRel
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[14]"></a>vSchedTbl1_CmdEp0</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl1_CmdEp0 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>vSchedTbl1_CmdEp1</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl1_CmdEp1 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>vSchedTbl1_CmdEp2</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl1_CmdEp2 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>vSchedTbl1_CmdEp3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = vSchedTbl1_CmdEp3 &rArr; OSProcessScheduleTableFinalDelay &rArr; StopScheduleTable &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessScheduleTableFinalDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>vSchedTbl2_CmdEp0</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl2_CmdEp0 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>vSchedTbl2_CmdEp1</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl2_CmdEp1 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>vSchedTbl2_CmdEp2</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vSchedTbl2_CmdEp2 &rArr; OSMakeNextExpiryPointReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMakeNextExpiryPointReady
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>vSchedTbl2_CmdEp3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cfgschedtbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = vSchedTbl2_CmdEp3 &rArr; OSProcessScheduleTableFinalDelay &rArr; StopScheduleTable &rArr; OS_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSProcessScheduleTableFinalDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfgschedtbl.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>_fp_digits</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5e]"></a>_printf_core</STRONG> (Thumb, 1800 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[63]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
